// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-order/pkg/db/ent/order"
	"github.com/google/uuid"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetGoodID sets the "good_id" field.
func (oc *OrderCreate) SetGoodID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetGoodID(u)
	return oc
}

// SetAppID sets the "app_id" field.
func (oc *OrderCreate) SetAppID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetAppID(u)
	return oc
}

// SetUserID sets the "user_id" field.
func (oc *OrderCreate) SetUserID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetUserID(u)
	return oc
}

// SetUnits sets the "units" field.
func (oc *OrderCreate) SetUnits(u uint32) *OrderCreate {
	oc.mutation.SetUnits(u)
	return oc
}

// SetDiscountCouponID sets the "discount_coupon_id" field.
func (oc *OrderCreate) SetDiscountCouponID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetDiscountCouponID(u)
	return oc
}

// SetUserSpecialReductionID sets the "user_special_reduction_id" field.
func (oc *OrderCreate) SetUserSpecialReductionID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetUserSpecialReductionID(u)
	return oc
}

// SetStart sets the "start" field.
func (oc *OrderCreate) SetStart(u uint32) *OrderCreate {
	oc.mutation.SetStart(u)
	return oc
}

// SetEnd sets the "end" field.
func (oc *OrderCreate) SetEnd(u uint32) *OrderCreate {
	oc.mutation.SetEnd(u)
	return oc
}

// SetCouponID sets the "coupon_id" field.
func (oc *OrderCreate) SetCouponID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetCouponID(u)
	return oc
}

// SetCreateAt sets the "create_at" field.
func (oc *OrderCreate) SetCreateAt(u uint32) *OrderCreate {
	oc.mutation.SetCreateAt(u)
	return oc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreateAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetCreateAt(*u)
	}
	return oc
}

// SetUpdateAt sets the "update_at" field.
func (oc *OrderCreate) SetUpdateAt(u uint32) *OrderCreate {
	oc.mutation.SetUpdateAt(u)
	return oc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdateAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetUpdateAt(*u)
	}
	return oc
}

// SetDeleteAt sets the "delete_at" field.
func (oc *OrderCreate) SetDeleteAt(u uint32) *OrderCreate {
	oc.mutation.SetDeleteAt(u)
	return oc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDeleteAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetDeleteAt(*u)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	oc.defaults()
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreateAt(); !ok {
		v := order.DefaultCreateAt()
		oc.mutation.SetCreateAt(v)
	}
	if _, ok := oc.mutation.UpdateAt(); !ok {
		v := order.DefaultUpdateAt()
		oc.mutation.SetUpdateAt(v)
	}
	if _, ok := oc.mutation.DeleteAt(); !ok {
		v := order.DefaultDeleteAt()
		oc.mutation.SetDeleteAt(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := order.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "good_id"`)}
	}
	if _, ok := oc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := oc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := oc.mutation.Units(); !ok {
		return &ValidationError{Name: "units", err: errors.New(`ent: missing required field "units"`)}
	}
	if _, ok := oc.mutation.DiscountCouponID(); !ok {
		return &ValidationError{Name: "discount_coupon_id", err: errors.New(`ent: missing required field "discount_coupon_id"`)}
	}
	if _, ok := oc.mutation.UserSpecialReductionID(); !ok {
		return &ValidationError{Name: "user_special_reduction_id", err: errors.New(`ent: missing required field "user_special_reduction_id"`)}
	}
	if _, ok := oc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "start"`)}
	}
	if _, ok := oc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "end"`)}
	}
	if _, ok := oc.mutation.CouponID(); !ok {
		return &ValidationError{Name: "coupon_id", err: errors.New(`ent: missing required field "coupon_id"`)}
	}
	if _, ok := oc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := oc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := oc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: order.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: order.FieldID,
			},
		}
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := oc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := oc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := oc.mutation.Units(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldUnits,
		})
		_node.Units = value
	}
	if value, ok := oc.mutation.DiscountCouponID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldDiscountCouponID,
		})
		_node.DiscountCouponID = value
	}
	if value, ok := oc.mutation.UserSpecialReductionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldUserSpecialReductionID,
		})
		_node.UserSpecialReductionID = value
	}
	if value, ok := oc.mutation.Start(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldStart,
		})
		_node.Start = value
	}
	if value, ok := oc.mutation.End(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldEnd,
		})
		_node.End = value
	}
	if value, ok := oc.mutation.CouponID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldCouponID,
		})
		_node.CouponID = value
	}
	if value, ok := oc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := oc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := oc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
