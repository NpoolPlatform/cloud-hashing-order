// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-order/pkg/db/ent/canceledorder"
	"github.com/google/uuid"
)

// CanceledOrder is the model entity for the CanceledOrder schema.
type CanceledOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CanceledOrder) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case canceledorder.FieldCreateAt, canceledorder.FieldUpdateAt, canceledorder.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case canceledorder.FieldID, canceledorder.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CanceledOrder", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CanceledOrder fields.
func (co *CanceledOrder) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case canceledorder.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				co.ID = *value
			}
		case canceledorder.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				co.OrderID = *value
			}
		case canceledorder.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				co.CreateAt = uint32(value.Int64)
			}
		case canceledorder.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				co.UpdateAt = uint32(value.Int64)
			}
		case canceledorder.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				co.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CanceledOrder.
// Note that you need to call CanceledOrder.Unwrap() before calling this method if this CanceledOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (co *CanceledOrder) Update() *CanceledOrderUpdateOne {
	return (&CanceledOrderClient{config: co.config}).UpdateOne(co)
}

// Unwrap unwraps the CanceledOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (co *CanceledOrder) Unwrap() *CanceledOrder {
	tx, ok := co.config.driver.(*txDriver)
	if !ok {
		panic("ent: CanceledOrder is not a transactional entity")
	}
	co.config.driver = tx.drv
	return co
}

// String implements the fmt.Stringer.
func (co *CanceledOrder) String() string {
	var builder strings.Builder
	builder.WriteString("CanceledOrder(")
	builder.WriteString(fmt.Sprintf("id=%v", co.ID))
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", co.OrderID))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", co.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", co.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", co.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// CanceledOrders is a parsable slice of CanceledOrder.
type CanceledOrders []*CanceledOrder

func (co CanceledOrders) config(cfg config) {
	for _i := range co {
		co[_i].config = cfg
	}
}
