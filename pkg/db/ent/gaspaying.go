// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-order/pkg/db/ent/gaspaying"
	"github.com/google/uuid"
)

// GasPaying is the model entity for the GasPaying schema.
type GasPaying struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uuid.UUID `json:"account_id,omitempty"`
	// State holds the value of the "state" field.
	State gaspaying.State `json:"state,omitempty"`
	// ChainTransactionID holds the value of the "chain_transaction_id" field.
	ChainTransactionID string `json:"chain_transaction_id,omitempty"`
	// PlatformTransactionID holds the value of the "platform_transaction_id" field.
	PlatformTransactionID uuid.UUID `json:"platform_transaction_id,omitempty"`
	// DurationMinutes holds the value of the "duration_minutes" field.
	DurationMinutes uint32 `json:"duration_minutes,omitempty"`
	// Used holds the value of the "used" field.
	Used bool `json:"used,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GasPaying) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case gaspaying.FieldUsed:
			values[i] = new(sql.NullBool)
		case gaspaying.FieldDurationMinutes, gaspaying.FieldCreateAt, gaspaying.FieldUpdateAt, gaspaying.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case gaspaying.FieldState, gaspaying.FieldChainTransactionID:
			values[i] = new(sql.NullString)
		case gaspaying.FieldID, gaspaying.FieldOrderID, gaspaying.FieldAccountID, gaspaying.FieldPlatformTransactionID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GasPaying", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GasPaying fields.
func (gp *GasPaying) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gaspaying.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gp.ID = *value
			}
		case gaspaying.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				gp.OrderID = *value
			}
		case gaspaying.FieldAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				gp.AccountID = *value
			}
		case gaspaying.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				gp.State = gaspaying.State(value.String)
			}
		case gaspaying.FieldChainTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_transaction_id", values[i])
			} else if value.Valid {
				gp.ChainTransactionID = value.String
			}
		case gaspaying.FieldPlatformTransactionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field platform_transaction_id", values[i])
			} else if value != nil {
				gp.PlatformTransactionID = *value
			}
		case gaspaying.FieldDurationMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_minutes", values[i])
			} else if value.Valid {
				gp.DurationMinutes = uint32(value.Int64)
			}
		case gaspaying.FieldUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field used", values[i])
			} else if value.Valid {
				gp.Used = value.Bool
			}
		case gaspaying.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gp.CreateAt = uint32(value.Int64)
			}
		case gaspaying.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gp.UpdateAt = uint32(value.Int64)
			}
		case gaspaying.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				gp.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GasPaying.
// Note that you need to call GasPaying.Unwrap() before calling this method if this GasPaying
// was returned from a transaction, and the transaction was committed or rolled back.
func (gp *GasPaying) Update() *GasPayingUpdateOne {
	return (&GasPayingClient{config: gp.config}).UpdateOne(gp)
}

// Unwrap unwraps the GasPaying entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gp *GasPaying) Unwrap() *GasPaying {
	tx, ok := gp.config.driver.(*txDriver)
	if !ok {
		panic("ent: GasPaying is not a transactional entity")
	}
	gp.config.driver = tx.drv
	return gp
}

// String implements the fmt.Stringer.
func (gp *GasPaying) String() string {
	var builder strings.Builder
	builder.WriteString("GasPaying(")
	builder.WriteString(fmt.Sprintf("id=%v", gp.ID))
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.OrderID))
	builder.WriteString(", account_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.AccountID))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", gp.State))
	builder.WriteString(", chain_transaction_id=")
	builder.WriteString(gp.ChainTransactionID)
	builder.WriteString(", platform_transaction_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.PlatformTransactionID))
	builder.WriteString(", duration_minutes=")
	builder.WriteString(fmt.Sprintf("%v", gp.DurationMinutes))
	builder.WriteString(", used=")
	builder.WriteString(fmt.Sprintf("%v", gp.Used))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", gp.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", gp.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", gp.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// GasPayings is a parsable slice of GasPaying.
type GasPayings []*GasPaying

func (gp GasPayings) config(cfg config) {
	for _i := range gp {
		gp[_i].config = cfg
	}
}
