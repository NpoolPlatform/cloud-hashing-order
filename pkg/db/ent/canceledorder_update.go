// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-order/pkg/db/ent/canceledorder"
	"github.com/NpoolPlatform/cloud-hashing-order/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CanceledOrderUpdate is the builder for updating CanceledOrder entities.
type CanceledOrderUpdate struct {
	config
	hooks    []Hook
	mutation *CanceledOrderMutation
}

// Where appends a list predicates to the CanceledOrderUpdate builder.
func (cou *CanceledOrderUpdate) Where(ps ...predicate.CanceledOrder) *CanceledOrderUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetOrderID sets the "order_id" field.
func (cou *CanceledOrderUpdate) SetOrderID(u uuid.UUID) *CanceledOrderUpdate {
	cou.mutation.SetOrderID(u)
	return cou
}

// SetCreateAt sets the "create_at" field.
func (cou *CanceledOrderUpdate) SetCreateAt(u uint32) *CanceledOrderUpdate {
	cou.mutation.ResetCreateAt()
	cou.mutation.SetCreateAt(u)
	return cou
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cou *CanceledOrderUpdate) SetNillableCreateAt(u *uint32) *CanceledOrderUpdate {
	if u != nil {
		cou.SetCreateAt(*u)
	}
	return cou
}

// AddCreateAt adds u to the "create_at" field.
func (cou *CanceledOrderUpdate) AddCreateAt(u uint32) *CanceledOrderUpdate {
	cou.mutation.AddCreateAt(u)
	return cou
}

// SetUpdateAt sets the "update_at" field.
func (cou *CanceledOrderUpdate) SetUpdateAt(u uint32) *CanceledOrderUpdate {
	cou.mutation.ResetUpdateAt()
	cou.mutation.SetUpdateAt(u)
	return cou
}

// AddUpdateAt adds u to the "update_at" field.
func (cou *CanceledOrderUpdate) AddUpdateAt(u uint32) *CanceledOrderUpdate {
	cou.mutation.AddUpdateAt(u)
	return cou
}

// SetDeleteAt sets the "delete_at" field.
func (cou *CanceledOrderUpdate) SetDeleteAt(u uint32) *CanceledOrderUpdate {
	cou.mutation.ResetDeleteAt()
	cou.mutation.SetDeleteAt(u)
	return cou
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (cou *CanceledOrderUpdate) SetNillableDeleteAt(u *uint32) *CanceledOrderUpdate {
	if u != nil {
		cou.SetDeleteAt(*u)
	}
	return cou
}

// AddDeleteAt adds u to the "delete_at" field.
func (cou *CanceledOrderUpdate) AddDeleteAt(u uint32) *CanceledOrderUpdate {
	cou.mutation.AddDeleteAt(u)
	return cou
}

// Mutation returns the CanceledOrderMutation object of the builder.
func (cou *CanceledOrderUpdate) Mutation() *CanceledOrderMutation {
	return cou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *CanceledOrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cou.defaults()
	if len(cou.hooks) == 0 {
		affected, err = cou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CanceledOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cou.mutation = mutation
			affected, err = cou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cou.hooks) - 1; i >= 0; i-- {
			if cou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cou *CanceledOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *CanceledOrderUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *CanceledOrderUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cou *CanceledOrderUpdate) defaults() {
	if _, ok := cou.mutation.UpdateAt(); !ok {
		v := canceledorder.UpdateDefaultUpdateAt()
		cou.mutation.SetUpdateAt(v)
	}
}

func (cou *CanceledOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   canceledorder.Table,
			Columns: canceledorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: canceledorder.FieldID,
			},
		},
	}
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: canceledorder.FieldOrderID,
		})
	}
	if value, ok := cou.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldCreateAt,
		})
	}
	if value, ok := cou.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldCreateAt,
		})
	}
	if value, ok := cou.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldUpdateAt,
		})
	}
	if value, ok := cou.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldUpdateAt,
		})
	}
	if value, ok := cou.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldDeleteAt,
		})
	}
	if value, ok := cou.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{canceledorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CanceledOrderUpdateOne is the builder for updating a single CanceledOrder entity.
type CanceledOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CanceledOrderMutation
}

// SetOrderID sets the "order_id" field.
func (couo *CanceledOrderUpdateOne) SetOrderID(u uuid.UUID) *CanceledOrderUpdateOne {
	couo.mutation.SetOrderID(u)
	return couo
}

// SetCreateAt sets the "create_at" field.
func (couo *CanceledOrderUpdateOne) SetCreateAt(u uint32) *CanceledOrderUpdateOne {
	couo.mutation.ResetCreateAt()
	couo.mutation.SetCreateAt(u)
	return couo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (couo *CanceledOrderUpdateOne) SetNillableCreateAt(u *uint32) *CanceledOrderUpdateOne {
	if u != nil {
		couo.SetCreateAt(*u)
	}
	return couo
}

// AddCreateAt adds u to the "create_at" field.
func (couo *CanceledOrderUpdateOne) AddCreateAt(u uint32) *CanceledOrderUpdateOne {
	couo.mutation.AddCreateAt(u)
	return couo
}

// SetUpdateAt sets the "update_at" field.
func (couo *CanceledOrderUpdateOne) SetUpdateAt(u uint32) *CanceledOrderUpdateOne {
	couo.mutation.ResetUpdateAt()
	couo.mutation.SetUpdateAt(u)
	return couo
}

// AddUpdateAt adds u to the "update_at" field.
func (couo *CanceledOrderUpdateOne) AddUpdateAt(u uint32) *CanceledOrderUpdateOne {
	couo.mutation.AddUpdateAt(u)
	return couo
}

// SetDeleteAt sets the "delete_at" field.
func (couo *CanceledOrderUpdateOne) SetDeleteAt(u uint32) *CanceledOrderUpdateOne {
	couo.mutation.ResetDeleteAt()
	couo.mutation.SetDeleteAt(u)
	return couo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (couo *CanceledOrderUpdateOne) SetNillableDeleteAt(u *uint32) *CanceledOrderUpdateOne {
	if u != nil {
		couo.SetDeleteAt(*u)
	}
	return couo
}

// AddDeleteAt adds u to the "delete_at" field.
func (couo *CanceledOrderUpdateOne) AddDeleteAt(u uint32) *CanceledOrderUpdateOne {
	couo.mutation.AddDeleteAt(u)
	return couo
}

// Mutation returns the CanceledOrderMutation object of the builder.
func (couo *CanceledOrderUpdateOne) Mutation() *CanceledOrderMutation {
	return couo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *CanceledOrderUpdateOne) Select(field string, fields ...string) *CanceledOrderUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated CanceledOrder entity.
func (couo *CanceledOrderUpdateOne) Save(ctx context.Context) (*CanceledOrder, error) {
	var (
		err  error
		node *CanceledOrder
	)
	couo.defaults()
	if len(couo.hooks) == 0 {
		node, err = couo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CanceledOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			couo.mutation = mutation
			node, err = couo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(couo.hooks) - 1; i >= 0; i-- {
			if couo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = couo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, couo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (couo *CanceledOrderUpdateOne) SaveX(ctx context.Context) *CanceledOrder {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *CanceledOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *CanceledOrderUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (couo *CanceledOrderUpdateOne) defaults() {
	if _, ok := couo.mutation.UpdateAt(); !ok {
		v := canceledorder.UpdateDefaultUpdateAt()
		couo.mutation.SetUpdateAt(v)
	}
}

func (couo *CanceledOrderUpdateOne) sqlSave(ctx context.Context) (_node *CanceledOrder, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   canceledorder.Table,
			Columns: canceledorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: canceledorder.FieldID,
			},
		},
	}
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CanceledOrder.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, canceledorder.FieldID)
		for _, f := range fields {
			if !canceledorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != canceledorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := couo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: canceledorder.FieldOrderID,
		})
	}
	if value, ok := couo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldCreateAt,
		})
	}
	if value, ok := couo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldCreateAt,
		})
	}
	if value, ok := couo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldUpdateAt,
		})
	}
	if value, ok := couo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldUpdateAt,
		})
	}
	if value, ok := couo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldDeleteAt,
		})
	}
	if value, ok := couo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: canceledorder.FieldDeleteAt,
		})
	}
	_node = &CanceledOrder{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{canceledorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
