// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudHashingOrderClient is the client API for CloudHashingOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudHashingOrderClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type cloudHashingOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHashingOrderClient(cc grpc.ClientConnInterface) CloudHashingOrderClient {
	return &cloudHashingOrderClient{cc}
}

func (c *cloudHashingOrderClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHashingOrderServer is the server API for CloudHashingOrder service.
// All implementations must embed UnimplementedCloudHashingOrderServer
// for forward compatibility
type CloudHashingOrderServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	mustEmbedUnimplementedCloudHashingOrderServer()
}

// UnimplementedCloudHashingOrderServer must be embedded to have forward compatible implementations.
type UnimplementedCloudHashingOrderServer struct {
}

func (UnimplementedCloudHashingOrderServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCloudHashingOrderServer) mustEmbedUnimplementedCloudHashingOrderServer() {}

// UnsafeCloudHashingOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudHashingOrderServer will
// result in compilation errors.
type UnsafeCloudHashingOrderServer interface {
	mustEmbedUnimplementedCloudHashingOrderServer()
}

func RegisterCloudHashingOrderServer(s grpc.ServiceRegistrar, srv CloudHashingOrderServer) {
	s.RegisterService(&CloudHashingOrder_ServiceDesc, srv)
}

func _CloudHashingOrder_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudHashingOrder_ServiceDesc is the grpc.ServiceDesc for CloudHashingOrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudHashingOrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.hashing.order.v1.CloudHashingOrder",
	HandlerType: (*CloudHashingOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _CloudHashingOrder_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cloud-hashing-order.proto",
}
